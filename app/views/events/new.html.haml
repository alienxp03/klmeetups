%section#home.bg-light
  .container
    .row
      .col-lg-8.col-lg-offset-2.text-center
        %h2.section-heading Submit new event to us!
        %hr.light
        .form.form-horizontal
          = form_for(@event, as: :event, url: create_events_path, method: :post) do |f|
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small Event name
                = f.text_field :name, autofocus: true, class: 'form-control'
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small Website URL
                = f.text_field :url, class: 'form-control'
            .form-group
              .col-sm-8.col-sm-offset-2
                .map-canvas{style: 'height: 400px; min-width: 400px'}
                  %input#pac-input.controls{:placeholder => "Search Box", :type => "text"}
                  #map
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small When is the event?
                = f.text_field :start_time, class: 'form-control'
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small Where is it?
                = f.email_field :location, class: 'form-control'
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small Event description
                = f.text_area :description, class: 'form-control', style: 'min-height: 150px'
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small Your email
                = f.email_field :email, class: 'form-control'
            .form-group
              .col-sm-4.col-sm-offset-4
                = f.submit "Submit", class: 'btn btn-default btn-block'

:javascript
  $(function () {
      $('#event_start_time').datetimepicker();
  });

  function initAutocomplete() {
    var map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 3.157479, lng: 101.712356},
      zoom: 13,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });

    // Create the search box and link it to the UI element.
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });

    var markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Clear out the old markers.
      markers.forEach(function(marker) {
        marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });
  }