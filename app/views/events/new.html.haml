%section#home.bg-light
  .container
    .row
      .col-lg-8.col-lg-offset-2.text-center
        %h2.section-heading Submit new event to us!
        %hr.light
        .form.form-horizontal
          = form_for(@event, as: :event, url: create_events_path, method: :post) do |f|
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small Event name
                = f.text_field :name, autofocus: true, class: 'form-control'
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small Website URL
                = f.text_field :url, class: 'form-control'
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small Where is it?
                .map-canvas{style: 'height: 400px; min-width: 400px'}
                  %input#pac-input.controls{:placeholder => "Search Box", :type => "text"}
                  #map
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small When is the event?
                = f.text_field :start_time, class: 'form-control'
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small Event description
                = f.text_area :description, class: 'form-control', style: 'min-height: 150px'
            .form-group
              .col-sm-8.col-sm-offset-2
                .text-left{style: "padding-bottom: 8px; color: #f05f40"}
                  %label.control-label.small Your email
                = f.email_field :email, class: 'form-control'
            .form-group
              .col-sm-4.col-sm-offset-4
                = f.submit "Submit", class: 'btn btn-info'

            - @event.build_location
            = f.fields_for :location do |fields|
              = fields.hidden_field :latitude
              = fields.hidden_field :longitude

:javascript
  $(function () {
      $('#event_start_time').datetimepicker();
  });

  function initMap() {
    var map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 3.157479, lng: 101.712356},
      zoom: 13
    });
    var input = /** @type {!HTMLInputElement} */(
        document.getElementById('pac-input'));

    var types = document.getElementById('type-selector');
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

    var autocomplete = new google.maps.places.Autocomplete(input);
    autocomplete.bindTo('bounds', map);

    var infowindow = new google.maps.InfoWindow();
    var marker = new google.maps.Marker({
      map: map,
      anchorPoint: new google.maps.Point(0, -29)
    });

    autocomplete.addListener('place_changed', function() {
      infowindow.close();
      marker.setVisible(false);
      var place = autocomplete.getPlace();
      if (!place.geometry) {
        window.alert("Autocomplete's returned place contains no geometry");
        return;
      }

      // If the place has a geometry, then present it on a map.
      if (place.geometry.viewport) {
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(17);  // Why 17? Because it looks good.
      }
      marker.setIcon(/** @type {google.maps.Icon} */({
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(35, 35)
      }));
      marker.setPosition(place.geometry.location);
      marker.setVisible(true);

      var address = '';
      if (place.address_components) {
        address = [
          (place.address_components[0] && place.address_components[0].short_name || ''),
          (place.address_components[1] && place.address_components[1].short_name || ''),
          (place.address_components[2] && place.address_components[2].long_name || '')
        ].join(' ');
      }

      infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
      infowindow.open(map, marker);
      $("#event_location_attributes").val(place.geometry.location.lat() + ',' + place.geometry.location.lng());
    });
  }

%script{:async => "", :defer => "", :src => "https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_API_KEY_BROWSER']}&libraries=places&callback=initMap", :type => "text/javascript"}
